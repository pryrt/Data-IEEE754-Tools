TODO
    - immediate:
      - build error
        convertTo<Dec/Hex>String( 0010000000000001 | 8010000000000001 | 001FFFFFFFFFFFFF | 801FFFFFFFFFFFFF, 17)
        -> round off is thus different on my system then on theirs.  I have to figure out a way to convert it
        without the round-off error -- or, more likely, I have to declare that accuracy beyond 16 decimal places
        or 13 hexadecimal places is _not_ guaranteed.
            One idea is to turn the fractional part into a bigint, multiply by 5**52, then shift the decimal
            point 52 to the left
                1 + 1/2**52 = 1 + 1*5**52 / 10**52         = 1.000_000_000_000_000_222_044_604_92(5)...
                1 + 2**51/2**52 = 1 + 2**51 * 5**52 / 2**52 = 1 + 5e51/1e52 = 1.5
                1 + (2**52-1)/2**52 = 1.999999999999999(8) = 1.999_999_999_999_999_777_955_395_17(5)
      - continue to implement and test conversionSpec optional argument

    - long-term: implement more functions from IEEE754-2007, especially
      + IEEE754 5.4.2 => 5.12
        ☐ <format>-convertFormat
        ☐ <format>-convertFromDecimalCharacter
            # converts a string decimal number (ie, output of to_dec_floatingpoint)
            #   into a <format>-floating point value
        ☑ <format>-convertToDecimalCharacter(source, conversionSpecification)
            # alias for to_dec_floatingpoint()
            # conversionSpecification is supposed to indicate formatting
            #       might want to use an optional integer which indicates how many places
            #       after the fractional-point to display (default to 16 => %.16f for to_dec_floatingpoint)
      + IEEE754 5.4.3 => 5.12
        ☐ <format>-convertFromHexCharacter
            # converts a string hexadecimal number (ie, output of to_hex_floatingpoint)
            #   into a <format>-floating point value
        ☑ <format>-convertToHexCharacter(source, conversionSpecification)
            # alias for to_hex_floatingpoint()
            #       I originally thought these were aliases for my rawhex754 functions... but no
            # conversionSpecification is supposed to indicate formatting
            #       might want to use an optional integer which indicates how many places
            #       after the fractional-point to display (default to 13 => %13.13s for to_hex_floatingpoint)
      + valid <format> = qw(binary32 binary64 binary128)

    - long-term: add in _32bit and _128bit versions
      - <format> = qw(binary32 binary64 binary128)
      - 128b = [1 sign][15 exp][112 frac], e=exp-16383

    - ALWAYS: look for new bug reports:
      <https://rt.cpan.org/Dist/Display.html?Queue=Data-IEEE754-Tools>
      <https://github.com/pryrt/Data-IEEE754-Tools/issues>
